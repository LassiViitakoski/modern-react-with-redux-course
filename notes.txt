Linkit
    -> https://semantic-ui.com/ -> Valmiita tyylittelyjä
    -> https://github.com/marak/Faker.js/ -> Feikki dataa omiin projekteihin
        -> Importataan Reactilla ja käytetään esim. <img src={Faker.iamge.avatar()} />

Create new react app -> npx create-react-app 'projektin nimi'

HTML style-blokki -> "background-color: red; border-radius: 100px"
JSX  style-blokki -> {{ backgroundColor: 'red', borderRadius: '100px' }}

HTML -> class="label"
JSX  -> className="label"

Compononent Nesting -> A component can be shown inside of another
Component Resuability -> We want to make components that can easily reused through out application
Component Configuration -> We should ne able to configure a component when it is created

States
    -> Only usable with class components (technically can be used with functional components using the 'hooks' system)
    -> You will confuse props with state
    -> 'State' is a Javascript object that contains data relevant to a component
    -> Updating 'state' on a component causes the component to (almost) instantly rerender
    -> State must be initialized when a component is created
    -> State can only be updated using the function 'setState'

3rd-exercise - App lifecycle walkthrough
    -> JS file loaded by browser
    -> Instace of App component is created
    -> App components 'constructor' function gets called
    -> State object is created and assigned to the 'this.state' property
    -> We call geolocation service
    -> React calls the components render method
    -> App returns JSX, gets rendered to page as HTML

    -> We get result of geolocation!
    -> We update our state object with a call to 'this.setState'
    -> React sees that we updated the state of a component
    -> React calls our 'render' method a second time
    -> Render method returns some (updated) JSX
    -> React take that JSX and updates content on the screen

Component Lifecycle
    -> constructor()
        -> Älä hae dataa constructorissa (suositus)
    -> render()
    
    -> Content visible on screen
    -> componentDidMount()
        -> Tekee funktiolle määritellyn asian, kun komponentti tulee renderöidään ensimmäisen kerran
            -> Hyvä esimerkiksi datan hakemiseen (API-kyselyt yms.)

    -> Sit and wait for updates
    -> componentDidUpdate()
        -> Tekee funktiolle määritellyn asian, kun komponentti renderöidään uudestaan
            -> Hyvä esimerkiksi datan hakemiseen, kun state/props muuttuu

    -> Sit and wait until this component is not longer shown
    -> componentWillUnmount()
        -> Tekee funktiolle määritellyn asian, kun komponentti tuhoutuu/poistuu
            -> Hyvä paikka tehdä cleanup

Other lifecycle methods (rarely used)
    -> shouldComponentUpdate()
    -> getDerivedStateFromProps
    -> getSnapshotBeforeUpdate

Component.defaultProps = {
    message: 'Loading...'
};   -> Asettaa komponentille default message propsin