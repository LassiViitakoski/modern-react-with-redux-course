Linkit
    -> https://semantic-ui.com/ -> Valmiita tyylittelyjä
    -> https://github.com/marak/Faker.js/ -> Feikki dataa omiin projekteihin -> Importataan Reactilla ja käytetään esim. <img src={Faker.iamge.avatar()} />
    -> https://lodash.com -> Hyvä javascript-kirjasto taulukoiden ja objektien käsittelyyn

Codepen-Linkit
    -> https://codepen.io/LassiViitakoski/pen/ZEevNaa?editors=0010

Jos käytät callback funktioita
    -> Määrittele ne aina arrow-funktioiksi, jotta this-määreet pysyvät oikeina

Add project to empty git repo
    -> git add *
    -> git commit -m ""
    -> git remote add origin https:///
    -> git push origin master

Web-server providers
    -> Vercel
    -> Netlify


Hyviä syntaksivinkkejä {
    const name = 'Lassi';

    const object = {
        name: name,
    }

    object.name -> Lassi

    const object = {
        name
    }

    object.name -> Lassi

    --> Objektit voidaan määritellä molemmilla tavoilla

    -----------------------------------------------------------------------------------------------------------

    const colors = ['red', 'blue'];

    const newColors = [...colors, 'green']
        -> ['red', 'blue', 'green']

    -----------------------------------------------------------------------------------------------------------

    const profile = { name: 'Sam' }

    const newProfile = { ...profile, age: 30 }
        -> { name: 'Sam', age: 30 }
}



Create new react app -> npx create-react-app 'projektin nimi'

HTML style-blokki -> "background-color: red; border-radius: 100px"
JSX  style-blokki -> {{ backgroundColor: 'red', borderRadius: '100px' }}

HTML -> class="label"
JSX  -> className="label"

Compononent Nesting -> A component can be shown inside of another
Component Resuability -> We want to make components that can easily reused through out application
Component Configuration -> We should ne able to configure a component when it is created

Jos kutsutaan funktiota event listenerissa esim. onClick tyylillä onClick={handleEvent()}
    -> Suorittaa handle event koodin, kun komponentti luodaan
    -> Täytyy käyttää muotoa onClick={() => handleEvent()} tai muotoon onClick={handleEvent}

States
    -> Only usable with class components (technically can be used with functional components using the 'hooks' system)
    -> You will confuse props with state
    -> 'State' is a Javascript object that contains data relevant to a component
    -> Updating 'state' on a component causes the component to (almost) instantly rerender
    -> State must be initialized when a component is created
    -> State can only be updated using the function 'setState'

3rd-exercise - App lifecycle walkthrough
    -> JS file loaded by browser
    -> Instace of App component is created
    -> App components 'constructor' function gets called
    -> State object is created and assigned to the 'this.state' property
    -> We call geolocation service
    -> React calls the components render method
    -> App returns JSX, gets rendered to page as HTML

    -> We get result of geolocation!
    -> We update our state object with a call to 'this.setState'
    -> React sees that we updated the state of a component
    -> React calls our 'render' method a second time
    -> Render method returns some (updated) JSX
    -> React take that JSX and updates content on the screen

Component Lifecycle
    -> Vain class based componenteissa

    -> constructor()
        -> Älä hae dataa constructorissa (suositus)
    -> render()
    
    -> Content visible on screen
    -> componentDidMount()
        -> Tekee funktiolle määritellyn asian, kun komponentti tulee renderöidään ensimmäisen kerran
            -> Hyvä esimerkiksi datan hakemiseen (API-kyselyt yms.)

    -> Sit and wait for updates
    -> componentDidUpdate()
        -> Tekee funktiolle määritellyn asian, kun komponentti renderöidään uudestaan
            -> Hyvä esimerkiksi datan hakemiseen, kun state/props muuttuu

    -> Sit and wait until this component is not longer shown
    -> componentWillUnmount()
        -> Tekee funktiolle määritellyn asian, kun komponentti tuhoutuu/poistuu
            -> Hyvä paikka tehdä cleanup

Other lifecycle methods (rarely used)
    -> shouldComponentUpdate()
    -> getDerivedStateFromProps
    -> getSnapshotBeforeUpdate

Component.defaultProps = {
    message: 'Loading...'
};   -> Asettaa komponentille default message propsin

Jos this.state yms. this. aiheuttaa errorin -> Käytä arrow funktiota

Jos on lista elementtejä, jotka halutaan laittaa DOM:iin, jokaisen elementin root elementtiin täytyy asettaa key property

React Refs
    -> Gives access to a single DOM element
    -> We create refs in the constructor, assign them to instance variables, then pass to a particular JSX element as props
    -> Täytyy käyttää Reactin Ref:ejä, jos halutaan päästä käsiksi DOM elementtien ominaisuuksiin


Hooks System
    -> useState 
        -> function that lets you use state in a functional component

    -> useEffect
        -> function that lets you use something like lifecycle methods in a functional component
    
    -> useRef
        -> function that lets you create 'ref' in a function component

Primitive Hooks
    -> useState
    -> useEffect
        -> Allows function components to use something like lifecycle methods
        -> We configure the hook to run some code automatically in one of three scenarios
            -> When the component is renderes for the first time only
            -> When the component is rendered for the first time and whenever it renderes
            -> When the component is rendered for the first time and (whenever it rerenderes and some piece of data has changed)
        -> useEffect Second Argument
            -> [] 
                -> Run at initial render

            -> ..nothing.. 
                -> Run at initial render 
                -> Run after every rerender

            -> [data]
                -> Run at initial render 
                -> Run after every rerender if some data inside of array has changed

    -> useContext
    -> useReducer
    -> useCallback
    -> useMemo
    -> useRef
    -> useImperativeHandle
    -> useLayoutEffect
    -> useDebugValue

// OUR OWN MADE HOOK
Custom Hook
    -> useTranslate
        -> useState
        -> useEffect

Custom Hooks
    -> Best way to create reusable code in a React project (besides components!)
    -> Created by exracting hook-related code out of a function component
    -> Custom hooks always make use of at least one primitive hook internally
    -> Each custom hook should have one purpose
    -> Kind of an art form!
    -> Data-fetching is a great thing to try to make reusable

Process for creating reusable hooks
    -> Identify each line of code related to some single purpose
    -> Identify the inputs to that code
    -> Identify the outputs to that code
    -> Extract all of the code into a seperate function, receiving the inputs as arguments, and returning the outputs

-> Jos JSX:än sisällä komponentti laitetaan toisen komponentin sisälle -> se tulee children nimisenä propsina.
-> Sama homma jos JSX:än sisällä komponentin sisälle laitetaan esim tekstiä.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

REDUX!

What is Redux?
    -> State management library
    -> Makes creating complex applications easier
    -> Not required to create a React app
    -> Not explicitly designed to work with React

Redux Cycle
    -> Action Creator
    -> Action
    -> Dispatch
    -> Reducers
    -> State

Redux-thunk
    -> Middleware to help us make requests in a redux application

General Data Loading With Redux
    -> Component gets rendered onto screen --------------------->---------------------------------------->|
    -> Component's 'componentDidMount' lifecycle method gets called ----------->------------------------->|-----> { Components are generally responsible for fetching data
    -> We call action creator from 'componentDidMount' --------------->---------------------------------->|         they need by calling an action creator }

    -> Action creator runs code to make an API requests ------------>------------------------------------>|
    -> API responds with data ----------------->------------------------------>-------------------------->|-----> { Action creators are responsible for making API request (This is where Redux-Thunk comes into play) }
    -> Action creator return an 'action' with the fetched data on the 'payload' property---->------------>|       

    -> Some reducer sees the action, returns the data off the 'payload' ------->------------------------->|-----> { We get fetched data into a component by generating new stae in our redux
    -> Because we generated some new state object, redux/react-redux cause our React app to be rendered ->|         store, then getting that into our component through mapStateToProps }


Middleware in Redux
    -> Function that gets called with every action we dispatch
    -> Has the ability to STOP, MODIFY, or otherwise mess around with actions
    -> Tons of open source middleware exists
    -> Most popular use of middleware is for dealing with async actions
    -> We are going to use a middleware called 'Redux-Thunk' to solve our async issues


Action creators Normal Rules
    -> Action Creators must return action objects
    -> Actions must have a type property
    -> Actions can optionally have a 'payload'


Rules with Redux Thunk
    -> Action Creators can return action objects
                        or
    -> Action Creators can return functions!
        -> If an object gets returned, it must have a type
        -> If an action object gets returned, it can optionally have a 'payload'


Rules of Reducers
    -> Must return value besides 'undefined'
    -> Produces 'state', or data to be used inside of your app using only previous state and the action
    -> Must not return reach 'out of itself' to decide what value to return (reducers are pure)
    
    -> MISLEADING -> Must not mutate its input 'state' argument
        -> You can mutate it all day and not see any errors!
        -> Its easier to tell beginners don't mutate state ever than to tell them when they can and can't
        -> We are not going to mutate state ever
        -> I want you to understand the behind the scenes of this rule to help you better understand Redux


---------------------------------------------------------------------------------------------------------------------

Lodash

{
    function getUser(id) {
        return 'Something';
    }

    const memoizedGetUser _.memoize(getUser);
     -> Tämän jälkeen jos memoizedGetUser:ia kutsutaan samalla id:llä
        -> Ei aja funktiota vaan palauttaa suoraan saman returnin, minkä palautti ensimmäisellä kerralla

}

Muita käyttökelpoisia lodash funktioita
    -> _.chain()
        -> jos chainataan funktio -> muissa funktioissa ei tarvitse käyttää alaviivaa
    -> _.uniq()


---------------------------------------------------------------------------------------------------------------------


Important note about React-Router!
    - Each component needs to be designed to work on isolation (fetch its own data!)


---------------------------------------------------------------------------------------------------------------------


Context System!!!

Props System
    -> Gets data from a parent component to a direct child component

Context System
    -> Gets data from a parent component to any nested child component
    -> Two ways to get information in
        -> Default Value
        -> Parent Component Provider
    
    -> Two ways to get information out
        -> this.context
        -> Consumer

